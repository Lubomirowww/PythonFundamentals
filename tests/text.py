#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞—á–∏
–°—ä–∑–¥–∞–¥–µ–Ω–æ —Å Python
"""

import json
import os
from datetime import datetime
from typing import List, Dict, Optional


class Task:
    """–ö–ª–∞—Å –∑–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—è–Ω–µ –Ω–∞ –∑–∞–¥–∞—á–∞"""

    def __init__(self, title: str, description: str = "", priority: str = "medium"):
        self.id = self._generate_id()
        self.title = title
        self.description = description
        self.priority = priority  # low, medium, high
        self.completed = False
        self.created_at = datetime.now().isoformat()
        self.completed_at = None

    def _generate_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ —É–Ω–∏–∫–∞–ª–µ–Ω ID –∑–∞ –∑–∞–¥–∞—á–∞—Ç–∞"""
        return str(hash(datetime.now().isoformat()))[-8:]

    def mark_completed(self):
        """–ú–∞—Ä–∫–∏—Ä–∞ –∑–∞–¥–∞—á–∞—Ç–∞ –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–∞"""
        self.completed = True
        self.completed_at = datetime.now().isoformat()

    def mark_pending(self):
        """–ú–∞—Ä–∫–∏—Ä–∞ –∑–∞–¥–∞—á–∞—Ç–∞ –∫–∞—Ç–æ –Ω–µ–∑–∞–≤—ä—Ä—à–µ–Ω–∞"""
        self.completed = False
        self.completed_at = None

    def to_dict(self) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞ –∑–∞–¥–∞—á–∞—Ç–∞ –≤ —Ä–µ—á–Ω–∏–∫"""
        return {
            'id': self.id,
            'title': self.title,
            'description': self.description,
            'priority': self.priority,
            'completed': self.completed,
            'created_at': self.created_at,
            'completed_at': self.completed_at
        }

    @classmethod
    def from_dict(cls, data: Dict) -> 'Task':
        """–°—ä–∑–¥–∞–≤–∞ –∑–∞–¥–∞—á–∞ –æ—Ç —Ä–µ—á–Ω–∏–∫"""
        task = cls(data['title'], data['description'], data['priority'])
        task.id = data['id']
        task.completed = data['completed']
        task.created_at = data['created_at']
        task.completed_at = data['completed_at']
        return task


class TaskManager:
    """–ö–ª–∞—Å –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞—á–∏"""

    def __init__(self, filename: str = "tasks.json"):
        self.filename = filename
        self.tasks: List[Task] = []
        self.load_tasks()

    def load_tasks(self):
        """–ó–∞—Ä–µ–∂–¥–∞ –∑–∞–¥–∞—á–∏—Ç–µ –æ—Ç —Ñ–∞–π–ª"""
        if os.path.exists(self.filename):
            try:
                with open(self.filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.tasks = [Task.from_dict(task_data) for task_data in data]
            except (json.JSONDecodeError, KeyError):
                print("‚ö†Ô∏è  –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∑–∞–¥–∞—á–∏—Ç–µ. –ó–∞–ø–æ—á–≤–∞–º —Å –ø—Ä–∞–∑–µ–Ω —Å–ø–∏—Å—ä–∫.")
                self.tasks = []

    def save_tasks(self):
        """–ó–∞–ø–∞–∑–≤–∞ –∑–∞–¥–∞—á–∏—Ç–µ –≤—ä–≤ —Ñ–∞–π–ª"""
        try:
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump([task.to_dict() for task in self.tasks], f,
                          ensure_ascii=False, indent=2)
        except IOError:
            print("‚ö†Ô∏è  –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –∑–∞–¥–∞—á–∏—Ç–µ.")

    def add_task(self, title: str, description: str = "", priority: str = "medium"):
        """–î–æ–±–∞–≤—è –Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞"""
        task = Task(title, description, priority)
        self.tasks.append(task)
        self.save_tasks()
        print(f"‚úÖ –ó–∞–¥–∞—á–∞—Ç–∞ '{title}' –µ –¥–æ–±–∞–≤–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    def list_tasks(self, show_completed: bool = True):
        """–ü–æ–∫–∞–∑–≤–∞ –≤—Å–∏—á–∫–∏ –∑–∞–¥–∞—á–∏"""
        if not self.tasks:
            print("üìù –ù—è–º–∞ –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å—ä–∫–∞.")
            return

        print("\n" + "=" * 60)
        print("üìã –°–ü–ò–°–™–ö –°–™–° –ó–ê–î–ê–ß–ò")
        print("=" * 60)

        for i, task in enumerate(self.tasks, 1):
            if not show_completed and task.completed:
                continue

            status = "‚úÖ" if task.completed else "‚è≥"
            priority_icon = {"low": "üü¢", "medium": "üü°", "high": "üî¥"}[task.priority]

            print(f"\n{i}. {status} {task.title}")
            print(f"   ID: {task.id}")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_icon} {task.priority.upper()}")

            if task.description:
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {task.description}")

            created_date = datetime.fromisoformat(task.created_at).strftime("%d.%m.%Y %H:%M")
            print(f"   –°—ä–∑–¥–∞–¥–µ–Ω–∞: {created_date}")

            if task.completed and task.completed_at:
                completed_date = datetime.fromisoformat(task.completed_at).strftime("%d.%m.%Y %H:%M")
                print(f"   –ó–∞–≤—ä—Ä—à–µ–Ω–∞: {completed_date}")

    def complete_task(self, task_id: str):
        """–ú–∞—Ä–∫–∏—Ä–∞ –∑–∞–¥–∞—á–∞ –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–∞"""
        task = self.find_task(task_id)
        if task:
            task.mark_completed()
            self.save_tasks()
            print(f"‚úÖ –ó–∞–¥–∞—á–∞—Ç–∞ '{task.title}' –µ –º–∞—Ä–∫–∏—Ä–∞–Ω–∞ –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–∞!")
        else:
            print("‚ùå –ó–∞–¥–∞—á–∞—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞.")

    def uncomplete_task(self, task_id: str):
        """–ú–∞—Ä–∫–∏—Ä–∞ –∑–∞–¥–∞—á–∞ –∫–∞—Ç–æ –Ω–µ–∑–∞–≤—ä—Ä—à–µ–Ω–∞"""
        task = self.find_task(task_id)
        if task:
            task.mark_pending()
            self.save_tasks()
            print(f"‚è≥ –ó–∞–¥–∞—á–∞—Ç–∞ '{task.title}' –µ –º–∞—Ä–∫–∏—Ä–∞–Ω–∞ –∫–∞—Ç–æ –Ω–µ–∑–∞–≤—ä—Ä—à–µ–Ω–∞!")
        else:
            print("‚ùå –ó–∞–¥–∞—á–∞—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞.")

    def delete_task(self, task_id: str):
        """–ò–∑—Ç—Ä–∏–≤–∞ –∑–∞–¥–∞—á–∞"""
        task = self.find_task(task_id)
        if task:
            self.tasks.remove(task)
            self.save_tasks()
            print(f"üóëÔ∏è  –ó–∞–¥–∞—á–∞—Ç–∞ '{task.title}' –µ –∏–∑—Ç—Ä–∏—Ç–∞!")
        else:
            print("‚ùå –ó–∞–¥–∞—á–∞—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞.")

    def find_task(self, task_id: str) -> Optional[Task]:
        """–ù–∞–º–∏—Ä–∞ –∑–∞–¥–∞—á–∞ –ø–æ ID"""
        for task in self.tasks:
            if task.id == task_id:
                return task
        return None

    def get_statistics(self):
        """–ü–æ–∫–∞–∑–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∑–∞–¥–∞—á–∏—Ç–µ"""
        total = len(self.tasks)
        completed = sum(1 for task in self.tasks if task.completed)
        pending = total - completed

        print("\n" + "=" * 40)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ò")
        print("=" * 40)
        print(f"–û–±—â–æ –∑–∞–¥–∞—á–∏: {total}")
        print(f"–ó–∞–≤—ä—Ä—à–µ–Ω–∏: {completed}")
        print(f"–ù–µ–∑–∞–≤—ä—Ä—à–µ–Ω–∏: {pending}")

        if total > 0:
            completion_rate = (completed / total) * 100
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤—ä—Ä—à–µ–Ω–∏: {completion_rate:.1f}%")


def show_menu():
    """–ü–æ–∫–∞–∑–≤–∞ –≥–ª–∞–≤–Ω–æ—Ç–æ –º–µ–Ω—é"""
    print("\n" + "=" * 50)
    print("üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê –ó–ê–î–ê–ß–ò")
    print("=" * 50)
    print("1. –î–æ–±–∞–≤–∏ –∑–∞–¥–∞—á–∞")
    print("2. –ü–æ–∫–∞–∂–∏ –≤—Å–∏—á–∫–∏ –∑–∞–¥–∞—á–∏")
    print("3. –ü–æ–∫–∞–∂–∏ —Å–∞–º–æ –Ω–µ–∑–∞–≤—ä—Ä—à–µ–Ω–∏ –∑–∞–¥–∞—á–∏")
    print("4. –ú–∞—Ä–∫–∏—Ä–∞–π –∑–∞–¥–∞—á–∞ –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–∞")
    print("5. –ú–∞—Ä–∫–∏—Ä–∞–π –∑–∞–¥–∞—á–∞ –∫–∞—Ç–æ –Ω–µ–∑–∞–≤—ä—Ä—à–µ–Ω–∞")
    print("6. –ò–∑—Ç—Ä–∏–π –∑–∞–¥–∞—á–∞")
    print("7. –ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("8. –ò–∑—Ö–æ–¥")
    print("-" * 50)


def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ"""
    print("üéâ –î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞—á–∏!")

    manager = TaskManager()

    while True:
        show_menu()
        choice = input("–ò–∑–±–µ—Ä–µ—Ç–µ –æ–ø—Ü–∏—è (1-8): ").strip()

        if choice == "1":
            print("\nüìù –î–û–ë–ê–í–Ø–ù–ï –ù–ê –ù–û–í–ê –ó–ê–î–ê–ß–ê")
            title = input("–ó–∞–≥–ª–∞–≤–∏–µ –Ω–∞ –∑–∞–¥–∞—á–∞—Ç–∞: ").strip()
            if not title:
                print("‚ùå –ó–∞–≥–ª–∞–≤–∏–µ—Ç–æ –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –ø—Ä–∞–∑–Ω–æ!")
                continue

            description = input("–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª–Ω–æ): ").strip()

            print("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:")
            print("1. –ù–∏—Å—ä–∫ (low)")
            print("2. –°—Ä–µ–¥–µ–Ω (medium)")
            print("3. –í–∏—Å–æ–∫ (high)")

            priority_choice = input("–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-3, –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ 2): ").strip()
            priority_map = {"1": "low", "2": "medium", "3": "high"}
            priority = priority_map.get(priority_choice, "medium")

            manager.add_task(title, description, priority)

        elif choice == "2":
            manager.list_tasks(show_completed=True)

        elif choice == "3":
            manager.list_tasks(show_completed=False)

        elif choice == "4":
            task_id = input("–í—ä–≤–µ–¥–µ—Ç–µ ID –Ω–∞ –∑–∞–¥–∞—á–∞—Ç–∞ –∑–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ: ").strip()
            manager.complete_task(task_id)

        elif choice == "5":
            task_id = input("–í—ä–≤–µ–¥–µ—Ç–µ ID –Ω–∞ –∑–∞–¥–∞—á–∞—Ç–∞ –∑–∞ –æ—Ç–º—è–Ω–∞ –Ω–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ: ").strip()
            manager.uncomplete_task(task_id)

        elif choice == "6":
            task_id = input("–í—ä–≤–µ–¥–µ—Ç–µ ID –Ω–∞ –∑–∞–¥–∞—á–∞—Ç–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ: ").strip()
            confirm = input("–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ? (–¥–∞/–Ω–µ): ").strip().lower()
            if confirm in ["–¥–∞", "yes", "y"]:
                manager.delete_task(task_id)
            else:
                print("‚ùå –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ—Ç–æ –µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

        elif choice == "7":
            manager.get_statistics()

        elif choice == "8":
            print("üëã –î–æ–≤–∏–∂–¥–∞–Ω–µ! –ë–ª–∞–≥–æ–¥–∞—Ä—è, —á–µ –∏–∑–ø–æ–ª–∑–≤–∞—Ö—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ!")
            break

        else:
            print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞ –æ–ø—Ü–∏—è! –ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 8.")

        input("\n–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ...")


if __name__ == "__main__":
    main()